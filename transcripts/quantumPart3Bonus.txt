Welcome to the bonus video of the quantum brute series, you can find the full playlist in the description. This video serves to fill in two important things I left from the previous videos. Firstly, we credit some of the researchers who gave us the wonderful results about quantum computing that I presented in the series. The other thing we missed out was the details of Grover's algorithm, which I present here. It will involve us taking a more convenient look at the mathematics behind quantum computing, so that's quite a bit to look forward to. We'll also talk a bit about how the way I presented quantum computing is a bit simplistic and remedy that a bit to close out the video.

We start with the question of how many uses of the Quantum Password Checker is needed to find the password. Back in 1994, Bennett, Bernstein, Brassard and Vazirani essentially showed that for a trillion trillion possibilities, you need at least a few hundred billion uses of the password checker. It didn't look anything like the proof we had, it doesn't use polynomials at all. Researchers were still trying to understand the limitations of quantum computing, and being able to prove that at least 100 billion uses were needed was a good sign. It would have been more satisfying to prove the much better result that you need around a trillion trillion uses of the password checker. Of course we know that this isn't possible, but it's quite interesting that in reality people already knew you couldn't do better than Grover's algorithm even before Grover came up with his algorithm in 1996. Needless to say his algorithm shocked people then, and will shock people forevermore whenever they learn of it.

The relation between probabilistic computing and polynomials was made by Minski and Papert back in 1968, and they used symmetrization to great effect. The use of Markov's theorem to translate a limit on polynomials to a limit on computers was made by Nisan and Szegedy in 1992. The relation between quantum computing and polynomials was made by Beals, Buhrman, Cleve, Mosca and de Wolf in 1998, and that connection along with the use of Markov's theorem is exactly what was presented in this series. You might recall that in the bonus video for Markov's inequality we spoke about Pafnuty Chebyshev and noted that his surname can be spelt in many different ways. That seems to be a pattern. Take Ronald de Wolf here. This is how his last name is usually spelt, but you can also 

*clear throat/say sorry nervously* umm...

Okay, so is there any explanation I can give you for Grover's algorithm? There is, but it'll be helpful to take another look at the mathematics underlying quantum computing first.

I mentioned that the state of a quantum computer can be specified by an amplitude for each of the possible memory settings. And that a quantum operation involves mapping each memory setting to a specific superposition. We also saw that when you perform such an operation on the quantum memory, you're performing it for each memory setting multiplied by the amplitude of that memory setting, and then adding up the resultant superpositions to get the new state of the quantum memory. This means that the resultant state is just a combination of the superpositions given by the operation, with the weights of the combination given by the amplitudes. That's exactly what matrix multiplication does, so let's write it like that. We can write the quantum memory as a vector of amplitudes, one amplitude for each memory setting. We know this is a length one vector, since the sum of the squares of the entries has to be one. Now let's look at the quantum operation. Let's line up the superpositions and then let each superposition be a column of a matrix. This matrix is how we represent the quantum operation. The way to take a combination of its columns is by multiplying it with a vector that specifies the weights of the combination. So our quantum operation matrix multipled by the quantum memory vector will give us a new vector which is the new state of the quantum memory. Every quantum operation is just a lienar transformation. We do have some requirements on the matrix though. Every column should be a length 1 vector and also any two columns must be orthogonal, which we had referred to earlier as not overlapping. Matrices like this are called unitary matrices. When their entries are real numbers they are also called rotation matrices because that's what such matrices do. Now that we're equipped with this new view of quantum computing we can see Grover's algorithm.

So this is how Grover's algorithm works. The initial state is a uniform superposition over memory settings, so that is the vector with all entries being 1/rt{n} where n is the number of possible passwords. If the correct password is s, which for simplicity we'll assume is the second password we want, our algorithm to change this vector to just the vector with entry 1 in position 2. Let's draw these two vectors. Of course these vectors would be in an n-dimensional space but I claim we know the angle between the vectors so we can accurately draw them as two length-1 vectors with that angle. How do we know the angle? The inital vector has a component of 1/sqrt{n} in the 2nd component, which is the direction of the desired vector. So cos(theta) is 1/sqrt{n}. By the way the vectors drawn here are assuming that N is 20.
Now we want to use the quantum password checker. Recall that the quantum password checker negates the amplitude corresponding to the correct password, so in this case it's negating the second component. After the first use of the quantum password checker the state of the quantum computer becomes this. This has the same effect as reflecting around the dashed line. Now our current state depicted in purple is farther away from the desired state. We can find out what the angle is, and for convenience let's use alpha to denote the angle 90-theta. Then you can see that our new angle is 90+alpha, or equivalently theta+2alpha.
The next quantum operation is grover's operation. What that does is it just reflects around the initial state. This is a unitary operation because if two vectors are orthogonal (like our base memory settings are), and you reflect both of them around a single line, their reflections will also be orthogonal. It's just a special kind of rotation. Now doing this operation to our quantum memory moves it to this new state. The angle this state makes with the desired state can be computed again, and it will be theta-2alpha, or equivalently 90-3alpha.
And we can repeatedly do these two operations, negating the component of the vector corresponding to the correct password... and reflecting around the inital state... Each time you do these two operations the state of the quantum computer goes closer to the desired state, and you can work out how quickly it moves there. Let's do this quantum password checker and grover's operation a third time, and we've actually reached really really close to the desired vector. If you look at your state now, you will see the password 2 with probability really really close to 1. With just 3 uses of the quantum password checker we get the actual password out of 20 passwords. Funnily if you continue doing the operations you will move away from the desired state. Grover's algorithm requires that you stop doing the operations and look at your quantum state after a specific number of steps.
You can verify for yourself that each time we do the two operations the angle of the vector decreases by twice alpha. We start with an angle of 90-alpha, or pi/2-alpha. After k steps we are at pi/2 - alpha -2k times alpha. Since alpha is 90-theta, alpha is sin^{-1}(1/rt{n}), which is basically 1/rt{n} for large n. So the number of times we have to do this pair of operations for the angle to reach close to zero is around pi/2 divided by 2/rt{n}, or rt{n} times pi/4. With n being 1 trillion trillion, this is just 785,398,163,397 uses of the password checker.

So now we've seen Grover's algorithm, we've seen this nice view of quantum algorithms, and it raises a question.

Is quantum computing just multiplying vectors with matrices? The answer is yes, but there'smore to it than that. Leaving it at multiplying vectors with matrices would be like saying that any operation that changes a classical computers memory is a valid operation. With that view, you can just define an operation that changes your memory and leaves the correct answer in the memory. So you can solve any problem with one operation. Of course, such an operation could be really complicated and when we use computers we don't have access to such overpowered operations. What we can do is make small local changes to our memory setting, only looking at a few bits at a time and changing their state. And we develop clever algorithms that manage to eventually do complex operations just using these local operations. Similarly a quantum algorithm doesn't really have access to arbitrary unitary transformations. It can only apply unitary transformations that work on a few of its qubits at a time, locally changing their state. So for instance if we have a 4 qubit memory (that's a memory with 4 variables, each taking value 0 or 1), and we want to use an operation that only looks at the first two qubits, that means we can only use operations that keep the last two qubits the same. All the operations we mentioned in grover's algorithm can actually be efficiently carried out via these kinds of local unitaries.

That's all the depth I wish to go into in this series, I hope it was understandable and I hope you liked it. Of course the story doesn't end here. What if I swapped those two qubits out onto a quantum pen drive. What happens to the superposition? The answer to that leads us to a fascinating concept called entanglement which is really useful and is already being used in cryptography.

Even without going to entanglement, there are other quantum algorithms known that outperform known classical algorithms even more than Grover's search did. There's Peter Shor's 1994 algorithm that efficiently finds the factors of numbers.

I won't even attempt to explain that here, but the internet is vast and these things have been covered on the internet. The internet also has something called the comments section of this video in which you can leave questions or ask for pointers and the internet, the whole of it, has the option to reply. I'll put any useful links that I can find in the description. That's it from me, have a nice day. :)